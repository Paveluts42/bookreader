// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/book.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/Paveluts42/bookreader/backend/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BookServiceName is the fully-qualified name of the BookService service.
	BookServiceName = "api.BookService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BookServiceUploadPDFProcedure is the fully-qualified name of the BookService's UploadPDF RPC.
	BookServiceUploadPDFProcedure = "/api.BookService/UploadPDF"
	// BookServiceDeleteBookProcedure is the fully-qualified name of the BookService's DeleteBook RPC.
	BookServiceDeleteBookProcedure = "/api.BookService/DeleteBook"
	// BookServiceGetBooksProcedure is the fully-qualified name of the BookService's GetBooks RPC.
	BookServiceGetBooksProcedure = "/api.BookService/GetBooks"
	// BookServiceGetBookProcedure is the fully-qualified name of the BookService's GetBook RPC.
	BookServiceGetBookProcedure = "/api.BookService/GetBook"
	// BookServiceUpdateBookPageProcedure is the fully-qualified name of the BookService's
	// UpdateBookPage RPC.
	BookServiceUpdateBookPageProcedure = "/api.BookService/UpdateBookPage"
)

// BookServiceClient is a client for the api.BookService service.
type BookServiceClient interface {
	UploadPDF(context.Context, *connect.Request[api.UploadRequest]) (*connect.Response[api.UploadResponse], error)
	DeleteBook(context.Context, *connect.Request[api.DeleteBookRequest]) (*connect.Response[api.DeleteBookResponse], error)
	GetBooks(context.Context, *connect.Request[api.GetBooksRequest]) (*connect.Response[api.GetBooksResponse], error)
	GetBook(context.Context, *connect.Request[api.GetBookRequest]) (*connect.Response[api.GetBookResponse], error)
	UpdateBookPage(context.Context, *connect.Request[api.UpdateBookPageRequest]) (*connect.Response[api.UpdateBookPageResponse], error)
}

// NewBookServiceClient constructs a client for the api.BookService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBookServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BookServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	bookServiceMethods := api.File_api_book_proto.Services().ByName("BookService").Methods()
	return &bookServiceClient{
		uploadPDF: connect.NewClient[api.UploadRequest, api.UploadResponse](
			httpClient,
			baseURL+BookServiceUploadPDFProcedure,
			connect.WithSchema(bookServiceMethods.ByName("UploadPDF")),
			connect.WithClientOptions(opts...),
		),
		deleteBook: connect.NewClient[api.DeleteBookRequest, api.DeleteBookResponse](
			httpClient,
			baseURL+BookServiceDeleteBookProcedure,
			connect.WithSchema(bookServiceMethods.ByName("DeleteBook")),
			connect.WithClientOptions(opts...),
		),
		getBooks: connect.NewClient[api.GetBooksRequest, api.GetBooksResponse](
			httpClient,
			baseURL+BookServiceGetBooksProcedure,
			connect.WithSchema(bookServiceMethods.ByName("GetBooks")),
			connect.WithClientOptions(opts...),
		),
		getBook: connect.NewClient[api.GetBookRequest, api.GetBookResponse](
			httpClient,
			baseURL+BookServiceGetBookProcedure,
			connect.WithSchema(bookServiceMethods.ByName("GetBook")),
			connect.WithClientOptions(opts...),
		),
		updateBookPage: connect.NewClient[api.UpdateBookPageRequest, api.UpdateBookPageResponse](
			httpClient,
			baseURL+BookServiceUpdateBookPageProcedure,
			connect.WithSchema(bookServiceMethods.ByName("UpdateBookPage")),
			connect.WithClientOptions(opts...),
		),
	}
}

// bookServiceClient implements BookServiceClient.
type bookServiceClient struct {
	uploadPDF      *connect.Client[api.UploadRequest, api.UploadResponse]
	deleteBook     *connect.Client[api.DeleteBookRequest, api.DeleteBookResponse]
	getBooks       *connect.Client[api.GetBooksRequest, api.GetBooksResponse]
	getBook        *connect.Client[api.GetBookRequest, api.GetBookResponse]
	updateBookPage *connect.Client[api.UpdateBookPageRequest, api.UpdateBookPageResponse]
}

// UploadPDF calls api.BookService.UploadPDF.
func (c *bookServiceClient) UploadPDF(ctx context.Context, req *connect.Request[api.UploadRequest]) (*connect.Response[api.UploadResponse], error) {
	return c.uploadPDF.CallUnary(ctx, req)
}

// DeleteBook calls api.BookService.DeleteBook.
func (c *bookServiceClient) DeleteBook(ctx context.Context, req *connect.Request[api.DeleteBookRequest]) (*connect.Response[api.DeleteBookResponse], error) {
	return c.deleteBook.CallUnary(ctx, req)
}

// GetBooks calls api.BookService.GetBooks.
func (c *bookServiceClient) GetBooks(ctx context.Context, req *connect.Request[api.GetBooksRequest]) (*connect.Response[api.GetBooksResponse], error) {
	return c.getBooks.CallUnary(ctx, req)
}

// GetBook calls api.BookService.GetBook.
func (c *bookServiceClient) GetBook(ctx context.Context, req *connect.Request[api.GetBookRequest]) (*connect.Response[api.GetBookResponse], error) {
	return c.getBook.CallUnary(ctx, req)
}

// UpdateBookPage calls api.BookService.UpdateBookPage.
func (c *bookServiceClient) UpdateBookPage(ctx context.Context, req *connect.Request[api.UpdateBookPageRequest]) (*connect.Response[api.UpdateBookPageResponse], error) {
	return c.updateBookPage.CallUnary(ctx, req)
}

// BookServiceHandler is an implementation of the api.BookService service.
type BookServiceHandler interface {
	UploadPDF(context.Context, *connect.Request[api.UploadRequest]) (*connect.Response[api.UploadResponse], error)
	DeleteBook(context.Context, *connect.Request[api.DeleteBookRequest]) (*connect.Response[api.DeleteBookResponse], error)
	GetBooks(context.Context, *connect.Request[api.GetBooksRequest]) (*connect.Response[api.GetBooksResponse], error)
	GetBook(context.Context, *connect.Request[api.GetBookRequest]) (*connect.Response[api.GetBookResponse], error)
	UpdateBookPage(context.Context, *connect.Request[api.UpdateBookPageRequest]) (*connect.Response[api.UpdateBookPageResponse], error)
}

// NewBookServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBookServiceHandler(svc BookServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bookServiceMethods := api.File_api_book_proto.Services().ByName("BookService").Methods()
	bookServiceUploadPDFHandler := connect.NewUnaryHandler(
		BookServiceUploadPDFProcedure,
		svc.UploadPDF,
		connect.WithSchema(bookServiceMethods.ByName("UploadPDF")),
		connect.WithHandlerOptions(opts...),
	)
	bookServiceDeleteBookHandler := connect.NewUnaryHandler(
		BookServiceDeleteBookProcedure,
		svc.DeleteBook,
		connect.WithSchema(bookServiceMethods.ByName("DeleteBook")),
		connect.WithHandlerOptions(opts...),
	)
	bookServiceGetBooksHandler := connect.NewUnaryHandler(
		BookServiceGetBooksProcedure,
		svc.GetBooks,
		connect.WithSchema(bookServiceMethods.ByName("GetBooks")),
		connect.WithHandlerOptions(opts...),
	)
	bookServiceGetBookHandler := connect.NewUnaryHandler(
		BookServiceGetBookProcedure,
		svc.GetBook,
		connect.WithSchema(bookServiceMethods.ByName("GetBook")),
		connect.WithHandlerOptions(opts...),
	)
	bookServiceUpdateBookPageHandler := connect.NewUnaryHandler(
		BookServiceUpdateBookPageProcedure,
		svc.UpdateBookPage,
		connect.WithSchema(bookServiceMethods.ByName("UpdateBookPage")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.BookService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BookServiceUploadPDFProcedure:
			bookServiceUploadPDFHandler.ServeHTTP(w, r)
		case BookServiceDeleteBookProcedure:
			bookServiceDeleteBookHandler.ServeHTTP(w, r)
		case BookServiceGetBooksProcedure:
			bookServiceGetBooksHandler.ServeHTTP(w, r)
		case BookServiceGetBookProcedure:
			bookServiceGetBookHandler.ServeHTTP(w, r)
		case BookServiceUpdateBookPageProcedure:
			bookServiceUpdateBookPageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBookServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBookServiceHandler struct{}

func (UnimplementedBookServiceHandler) UploadPDF(context.Context, *connect.Request[api.UploadRequest]) (*connect.Response[api.UploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.BookService.UploadPDF is not implemented"))
}

func (UnimplementedBookServiceHandler) DeleteBook(context.Context, *connect.Request[api.DeleteBookRequest]) (*connect.Response[api.DeleteBookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.BookService.DeleteBook is not implemented"))
}

func (UnimplementedBookServiceHandler) GetBooks(context.Context, *connect.Request[api.GetBooksRequest]) (*connect.Response[api.GetBooksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.BookService.GetBooks is not implemented"))
}

func (UnimplementedBookServiceHandler) GetBook(context.Context, *connect.Request[api.GetBookRequest]) (*connect.Response[api.GetBookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.BookService.GetBook is not implemented"))
}

func (UnimplementedBookServiceHandler) UpdateBookPage(context.Context, *connect.Request[api.UpdateBookPageRequest]) (*connect.Response[api.UpdateBookPageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.BookService.UpdateBookPage is not implemented"))
}
