// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/bookmarks.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/Paveluts42/bookreader/backend/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BookmarkServiceName is the fully-qualified name of the BookmarkService service.
	BookmarkServiceName = "api.BookmarkService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BookmarkServiceDeleteBookmarkProcedure is the fully-qualified name of the BookmarkService's
	// DeleteBookmark RPC.
	BookmarkServiceDeleteBookmarkProcedure = "/api.BookmarkService/DeleteBookmark"
	// BookmarkServiceAddBookmarkProcedure is the fully-qualified name of the BookmarkService's
	// AddBookmark RPC.
	BookmarkServiceAddBookmarkProcedure = "/api.BookmarkService/AddBookmark"
	// BookmarkServiceGetBookmarksProcedure is the fully-qualified name of the BookmarkService's
	// GetBookmarks RPC.
	BookmarkServiceGetBookmarksProcedure = "/api.BookmarkService/GetBookmarks"
)

// BookmarkServiceClient is a client for the api.BookmarkService service.
type BookmarkServiceClient interface {
	DeleteBookmark(context.Context, *connect.Request[api.DeleteBookmarkRequest]) (*connect.Response[api.DeleteBookmarkResponse], error)
	AddBookmark(context.Context, *connect.Request[api.AddBookmarkRequest]) (*connect.Response[api.AddBookmarkResponse], error)
	GetBookmarks(context.Context, *connect.Request[api.GetBookmarksRequest]) (*connect.Response[api.GetBookmarksResponse], error)
}

// NewBookmarkServiceClient constructs a client for the api.BookmarkService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBookmarkServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BookmarkServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	bookmarkServiceMethods := api.File_api_bookmarks_proto.Services().ByName("BookmarkService").Methods()
	return &bookmarkServiceClient{
		deleteBookmark: connect.NewClient[api.DeleteBookmarkRequest, api.DeleteBookmarkResponse](
			httpClient,
			baseURL+BookmarkServiceDeleteBookmarkProcedure,
			connect.WithSchema(bookmarkServiceMethods.ByName("DeleteBookmark")),
			connect.WithClientOptions(opts...),
		),
		addBookmark: connect.NewClient[api.AddBookmarkRequest, api.AddBookmarkResponse](
			httpClient,
			baseURL+BookmarkServiceAddBookmarkProcedure,
			connect.WithSchema(bookmarkServiceMethods.ByName("AddBookmark")),
			connect.WithClientOptions(opts...),
		),
		getBookmarks: connect.NewClient[api.GetBookmarksRequest, api.GetBookmarksResponse](
			httpClient,
			baseURL+BookmarkServiceGetBookmarksProcedure,
			connect.WithSchema(bookmarkServiceMethods.ByName("GetBookmarks")),
			connect.WithClientOptions(opts...),
		),
	}
}

// bookmarkServiceClient implements BookmarkServiceClient.
type bookmarkServiceClient struct {
	deleteBookmark *connect.Client[api.DeleteBookmarkRequest, api.DeleteBookmarkResponse]
	addBookmark    *connect.Client[api.AddBookmarkRequest, api.AddBookmarkResponse]
	getBookmarks   *connect.Client[api.GetBookmarksRequest, api.GetBookmarksResponse]
}

// DeleteBookmark calls api.BookmarkService.DeleteBookmark.
func (c *bookmarkServiceClient) DeleteBookmark(ctx context.Context, req *connect.Request[api.DeleteBookmarkRequest]) (*connect.Response[api.DeleteBookmarkResponse], error) {
	return c.deleteBookmark.CallUnary(ctx, req)
}

// AddBookmark calls api.BookmarkService.AddBookmark.
func (c *bookmarkServiceClient) AddBookmark(ctx context.Context, req *connect.Request[api.AddBookmarkRequest]) (*connect.Response[api.AddBookmarkResponse], error) {
	return c.addBookmark.CallUnary(ctx, req)
}

// GetBookmarks calls api.BookmarkService.GetBookmarks.
func (c *bookmarkServiceClient) GetBookmarks(ctx context.Context, req *connect.Request[api.GetBookmarksRequest]) (*connect.Response[api.GetBookmarksResponse], error) {
	return c.getBookmarks.CallUnary(ctx, req)
}

// BookmarkServiceHandler is an implementation of the api.BookmarkService service.
type BookmarkServiceHandler interface {
	DeleteBookmark(context.Context, *connect.Request[api.DeleteBookmarkRequest]) (*connect.Response[api.DeleteBookmarkResponse], error)
	AddBookmark(context.Context, *connect.Request[api.AddBookmarkRequest]) (*connect.Response[api.AddBookmarkResponse], error)
	GetBookmarks(context.Context, *connect.Request[api.GetBookmarksRequest]) (*connect.Response[api.GetBookmarksResponse], error)
}

// NewBookmarkServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBookmarkServiceHandler(svc BookmarkServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	bookmarkServiceMethods := api.File_api_bookmarks_proto.Services().ByName("BookmarkService").Methods()
	bookmarkServiceDeleteBookmarkHandler := connect.NewUnaryHandler(
		BookmarkServiceDeleteBookmarkProcedure,
		svc.DeleteBookmark,
		connect.WithSchema(bookmarkServiceMethods.ByName("DeleteBookmark")),
		connect.WithHandlerOptions(opts...),
	)
	bookmarkServiceAddBookmarkHandler := connect.NewUnaryHandler(
		BookmarkServiceAddBookmarkProcedure,
		svc.AddBookmark,
		connect.WithSchema(bookmarkServiceMethods.ByName("AddBookmark")),
		connect.WithHandlerOptions(opts...),
	)
	bookmarkServiceGetBookmarksHandler := connect.NewUnaryHandler(
		BookmarkServiceGetBookmarksProcedure,
		svc.GetBookmarks,
		connect.WithSchema(bookmarkServiceMethods.ByName("GetBookmarks")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.BookmarkService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BookmarkServiceDeleteBookmarkProcedure:
			bookmarkServiceDeleteBookmarkHandler.ServeHTTP(w, r)
		case BookmarkServiceAddBookmarkProcedure:
			bookmarkServiceAddBookmarkHandler.ServeHTTP(w, r)
		case BookmarkServiceGetBookmarksProcedure:
			bookmarkServiceGetBookmarksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBookmarkServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBookmarkServiceHandler struct{}

func (UnimplementedBookmarkServiceHandler) DeleteBookmark(context.Context, *connect.Request[api.DeleteBookmarkRequest]) (*connect.Response[api.DeleteBookmarkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.BookmarkService.DeleteBookmark is not implemented"))
}

func (UnimplementedBookmarkServiceHandler) AddBookmark(context.Context, *connect.Request[api.AddBookmarkRequest]) (*connect.Response[api.AddBookmarkResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.BookmarkService.AddBookmark is not implemented"))
}

func (UnimplementedBookmarkServiceHandler) GetBookmarks(context.Context, *connect.Request[api.GetBookmarksRequest]) (*connect.Response[api.GetBookmarksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.BookmarkService.GetBookmarks is not implemented"))
}
