// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/note.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/Paveluts42/bookreader/backend/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// NoteServiceName is the fully-qualified name of the NoteService service.
	NoteServiceName = "api.NoteService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// NoteServiceAddNoteProcedure is the fully-qualified name of the NoteService's AddNote RPC.
	NoteServiceAddNoteProcedure = "/api.NoteService/AddNote"
	// NoteServiceGetNotesProcedure is the fully-qualified name of the NoteService's GetNotes RPC.
	NoteServiceGetNotesProcedure = "/api.NoteService/GetNotes"
)

// NoteServiceClient is a client for the api.NoteService service.
type NoteServiceClient interface {
	AddNote(context.Context, *connect.Request[api.AddNoteRequest]) (*connect.Response[api.AddNoteResponse], error)
	GetNotes(context.Context, *connect.Request[api.GetNotesRequest]) (*connect.Response[api.GetNotesResponse], error)
}

// NewNoteServiceClient constructs a client for the api.NoteService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewNoteServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) NoteServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	noteServiceMethods := api.File_api_note_proto.Services().ByName("NoteService").Methods()
	return &noteServiceClient{
		addNote: connect.NewClient[api.AddNoteRequest, api.AddNoteResponse](
			httpClient,
			baseURL+NoteServiceAddNoteProcedure,
			connect.WithSchema(noteServiceMethods.ByName("AddNote")),
			connect.WithClientOptions(opts...),
		),
		getNotes: connect.NewClient[api.GetNotesRequest, api.GetNotesResponse](
			httpClient,
			baseURL+NoteServiceGetNotesProcedure,
			connect.WithSchema(noteServiceMethods.ByName("GetNotes")),
			connect.WithClientOptions(opts...),
		),
	}
}

// noteServiceClient implements NoteServiceClient.
type noteServiceClient struct {
	addNote  *connect.Client[api.AddNoteRequest, api.AddNoteResponse]
	getNotes *connect.Client[api.GetNotesRequest, api.GetNotesResponse]
}

// AddNote calls api.NoteService.AddNote.
func (c *noteServiceClient) AddNote(ctx context.Context, req *connect.Request[api.AddNoteRequest]) (*connect.Response[api.AddNoteResponse], error) {
	return c.addNote.CallUnary(ctx, req)
}

// GetNotes calls api.NoteService.GetNotes.
func (c *noteServiceClient) GetNotes(ctx context.Context, req *connect.Request[api.GetNotesRequest]) (*connect.Response[api.GetNotesResponse], error) {
	return c.getNotes.CallUnary(ctx, req)
}

// NoteServiceHandler is an implementation of the api.NoteService service.
type NoteServiceHandler interface {
	AddNote(context.Context, *connect.Request[api.AddNoteRequest]) (*connect.Response[api.AddNoteResponse], error)
	GetNotes(context.Context, *connect.Request[api.GetNotesRequest]) (*connect.Response[api.GetNotesResponse], error)
}

// NewNoteServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewNoteServiceHandler(svc NoteServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	noteServiceMethods := api.File_api_note_proto.Services().ByName("NoteService").Methods()
	noteServiceAddNoteHandler := connect.NewUnaryHandler(
		NoteServiceAddNoteProcedure,
		svc.AddNote,
		connect.WithSchema(noteServiceMethods.ByName("AddNote")),
		connect.WithHandlerOptions(opts...),
	)
	noteServiceGetNotesHandler := connect.NewUnaryHandler(
		NoteServiceGetNotesProcedure,
		svc.GetNotes,
		connect.WithSchema(noteServiceMethods.ByName("GetNotes")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.NoteService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case NoteServiceAddNoteProcedure:
			noteServiceAddNoteHandler.ServeHTTP(w, r)
		case NoteServiceGetNotesProcedure:
			noteServiceGetNotesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedNoteServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedNoteServiceHandler struct{}

func (UnimplementedNoteServiceHandler) AddNote(context.Context, *connect.Request[api.AddNoteRequest]) (*connect.Response[api.AddNoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.NoteService.AddNote is not implemented"))
}

func (UnimplementedNoteServiceHandler) GetNotes(context.Context, *connect.Request[api.GetNotesRequest]) (*connect.Response[api.GetNotesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.NoteService.GetNotes is not implemented"))
}
