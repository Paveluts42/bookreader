// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/reader.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/Paveluts42/bookreader/backend/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReaderServiceName is the fully-qualified name of the ReaderService service.
	ReaderServiceName = "api.ReaderService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReaderServiceAddNoteProcedure is the fully-qualified name of the ReaderService's AddNote RPC.
	ReaderServiceAddNoteProcedure = "/api.ReaderService/AddNote"
	// ReaderServiceGetNotesProcedure is the fully-qualified name of the ReaderService's GetNotes RPC.
	ReaderServiceGetNotesProcedure = "/api.ReaderService/GetNotes"
	// ReaderServiceDeleteBookProcedure is the fully-qualified name of the ReaderService's DeleteBook
	// RPC.
	ReaderServiceDeleteBookProcedure = "/api.ReaderService/DeleteBook"
	// ReaderServiceUploadPDFProcedure is the fully-qualified name of the ReaderService's UploadPDF RPC.
	ReaderServiceUploadPDFProcedure = "/api.ReaderService/UploadPDF"
	// ReaderServiceUpdateBookPageProcedure is the fully-qualified name of the ReaderService's
	// UpdateBookPage RPC.
	ReaderServiceUpdateBookPageProcedure = "/api.ReaderService/UpdateBookPage"
	// ReaderServiceGetBooksProcedure is the fully-qualified name of the ReaderService's GetBooks RPC.
	ReaderServiceGetBooksProcedure = "/api.ReaderService/GetBooks"
	// ReaderServiceGetBookProcedure is the fully-qualified name of the ReaderService's GetBook RPC.
	ReaderServiceGetBookProcedure = "/api.ReaderService/GetBook"
)

// ReaderServiceClient is a client for the api.ReaderService service.
type ReaderServiceClient interface {
	AddNote(context.Context, *connect.Request[api.AddNoteRequest]) (*connect.Response[api.AddNoteResponse], error)
	GetNotes(context.Context, *connect.Request[api.GetNotesRequest]) (*connect.Response[api.GetNotesResponse], error)
	DeleteBook(context.Context, *connect.Request[api.DeleteBookRequest]) (*connect.Response[api.DeleteBookResponse], error)
	UploadPDF(context.Context, *connect.Request[api.UploadRequest]) (*connect.Response[api.UploadResponse], error)
	UpdateBookPage(context.Context, *connect.Request[api.UpdateBookPageRequest]) (*connect.Response[api.UpdateBookPageResponse], error)
	GetBooks(context.Context, *connect.Request[api.GetBooksRequest]) (*connect.Response[api.GetBooksResponse], error)
	GetBook(context.Context, *connect.Request[api.GetBookRequest]) (*connect.Response[api.GetBookResponse], error)
}

// NewReaderServiceClient constructs a client for the api.ReaderService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReaderServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReaderServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	readerServiceMethods := api.File_api_reader_proto.Services().ByName("ReaderService").Methods()
	return &readerServiceClient{
		addNote: connect.NewClient[api.AddNoteRequest, api.AddNoteResponse](
			httpClient,
			baseURL+ReaderServiceAddNoteProcedure,
			connect.WithSchema(readerServiceMethods.ByName("AddNote")),
			connect.WithClientOptions(opts...),
		),
		getNotes: connect.NewClient[api.GetNotesRequest, api.GetNotesResponse](
			httpClient,
			baseURL+ReaderServiceGetNotesProcedure,
			connect.WithSchema(readerServiceMethods.ByName("GetNotes")),
			connect.WithClientOptions(opts...),
		),
		deleteBook: connect.NewClient[api.DeleteBookRequest, api.DeleteBookResponse](
			httpClient,
			baseURL+ReaderServiceDeleteBookProcedure,
			connect.WithSchema(readerServiceMethods.ByName("DeleteBook")),
			connect.WithClientOptions(opts...),
		),
		uploadPDF: connect.NewClient[api.UploadRequest, api.UploadResponse](
			httpClient,
			baseURL+ReaderServiceUploadPDFProcedure,
			connect.WithSchema(readerServiceMethods.ByName("UploadPDF")),
			connect.WithClientOptions(opts...),
		),
		updateBookPage: connect.NewClient[api.UpdateBookPageRequest, api.UpdateBookPageResponse](
			httpClient,
			baseURL+ReaderServiceUpdateBookPageProcedure,
			connect.WithSchema(readerServiceMethods.ByName("UpdateBookPage")),
			connect.WithClientOptions(opts...),
		),
		getBooks: connect.NewClient[api.GetBooksRequest, api.GetBooksResponse](
			httpClient,
			baseURL+ReaderServiceGetBooksProcedure,
			connect.WithSchema(readerServiceMethods.ByName("GetBooks")),
			connect.WithClientOptions(opts...),
		),
		getBook: connect.NewClient[api.GetBookRequest, api.GetBookResponse](
			httpClient,
			baseURL+ReaderServiceGetBookProcedure,
			connect.WithSchema(readerServiceMethods.ByName("GetBook")),
			connect.WithClientOptions(opts...),
		),
	}
}

// readerServiceClient implements ReaderServiceClient.
type readerServiceClient struct {
	addNote        *connect.Client[api.AddNoteRequest, api.AddNoteResponse]
	getNotes       *connect.Client[api.GetNotesRequest, api.GetNotesResponse]
	deleteBook     *connect.Client[api.DeleteBookRequest, api.DeleteBookResponse]
	uploadPDF      *connect.Client[api.UploadRequest, api.UploadResponse]
	updateBookPage *connect.Client[api.UpdateBookPageRequest, api.UpdateBookPageResponse]
	getBooks       *connect.Client[api.GetBooksRequest, api.GetBooksResponse]
	getBook        *connect.Client[api.GetBookRequest, api.GetBookResponse]
}

// AddNote calls api.ReaderService.AddNote.
func (c *readerServiceClient) AddNote(ctx context.Context, req *connect.Request[api.AddNoteRequest]) (*connect.Response[api.AddNoteResponse], error) {
	return c.addNote.CallUnary(ctx, req)
}

// GetNotes calls api.ReaderService.GetNotes.
func (c *readerServiceClient) GetNotes(ctx context.Context, req *connect.Request[api.GetNotesRequest]) (*connect.Response[api.GetNotesResponse], error) {
	return c.getNotes.CallUnary(ctx, req)
}

// DeleteBook calls api.ReaderService.DeleteBook.
func (c *readerServiceClient) DeleteBook(ctx context.Context, req *connect.Request[api.DeleteBookRequest]) (*connect.Response[api.DeleteBookResponse], error) {
	return c.deleteBook.CallUnary(ctx, req)
}

// UploadPDF calls api.ReaderService.UploadPDF.
func (c *readerServiceClient) UploadPDF(ctx context.Context, req *connect.Request[api.UploadRequest]) (*connect.Response[api.UploadResponse], error) {
	return c.uploadPDF.CallUnary(ctx, req)
}

// UpdateBookPage calls api.ReaderService.UpdateBookPage.
func (c *readerServiceClient) UpdateBookPage(ctx context.Context, req *connect.Request[api.UpdateBookPageRequest]) (*connect.Response[api.UpdateBookPageResponse], error) {
	return c.updateBookPage.CallUnary(ctx, req)
}

// GetBooks calls api.ReaderService.GetBooks.
func (c *readerServiceClient) GetBooks(ctx context.Context, req *connect.Request[api.GetBooksRequest]) (*connect.Response[api.GetBooksResponse], error) {
	return c.getBooks.CallUnary(ctx, req)
}

// GetBook calls api.ReaderService.GetBook.
func (c *readerServiceClient) GetBook(ctx context.Context, req *connect.Request[api.GetBookRequest]) (*connect.Response[api.GetBookResponse], error) {
	return c.getBook.CallUnary(ctx, req)
}

// ReaderServiceHandler is an implementation of the api.ReaderService service.
type ReaderServiceHandler interface {
	AddNote(context.Context, *connect.Request[api.AddNoteRequest]) (*connect.Response[api.AddNoteResponse], error)
	GetNotes(context.Context, *connect.Request[api.GetNotesRequest]) (*connect.Response[api.GetNotesResponse], error)
	DeleteBook(context.Context, *connect.Request[api.DeleteBookRequest]) (*connect.Response[api.DeleteBookResponse], error)
	UploadPDF(context.Context, *connect.Request[api.UploadRequest]) (*connect.Response[api.UploadResponse], error)
	UpdateBookPage(context.Context, *connect.Request[api.UpdateBookPageRequest]) (*connect.Response[api.UpdateBookPageResponse], error)
	GetBooks(context.Context, *connect.Request[api.GetBooksRequest]) (*connect.Response[api.GetBooksResponse], error)
	GetBook(context.Context, *connect.Request[api.GetBookRequest]) (*connect.Response[api.GetBookResponse], error)
}

// NewReaderServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReaderServiceHandler(svc ReaderServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	readerServiceMethods := api.File_api_reader_proto.Services().ByName("ReaderService").Methods()
	readerServiceAddNoteHandler := connect.NewUnaryHandler(
		ReaderServiceAddNoteProcedure,
		svc.AddNote,
		connect.WithSchema(readerServiceMethods.ByName("AddNote")),
		connect.WithHandlerOptions(opts...),
	)
	readerServiceGetNotesHandler := connect.NewUnaryHandler(
		ReaderServiceGetNotesProcedure,
		svc.GetNotes,
		connect.WithSchema(readerServiceMethods.ByName("GetNotes")),
		connect.WithHandlerOptions(opts...),
	)
	readerServiceDeleteBookHandler := connect.NewUnaryHandler(
		ReaderServiceDeleteBookProcedure,
		svc.DeleteBook,
		connect.WithSchema(readerServiceMethods.ByName("DeleteBook")),
		connect.WithHandlerOptions(opts...),
	)
	readerServiceUploadPDFHandler := connect.NewUnaryHandler(
		ReaderServiceUploadPDFProcedure,
		svc.UploadPDF,
		connect.WithSchema(readerServiceMethods.ByName("UploadPDF")),
		connect.WithHandlerOptions(opts...),
	)
	readerServiceUpdateBookPageHandler := connect.NewUnaryHandler(
		ReaderServiceUpdateBookPageProcedure,
		svc.UpdateBookPage,
		connect.WithSchema(readerServiceMethods.ByName("UpdateBookPage")),
		connect.WithHandlerOptions(opts...),
	)
	readerServiceGetBooksHandler := connect.NewUnaryHandler(
		ReaderServiceGetBooksProcedure,
		svc.GetBooks,
		connect.WithSchema(readerServiceMethods.ByName("GetBooks")),
		connect.WithHandlerOptions(opts...),
	)
	readerServiceGetBookHandler := connect.NewUnaryHandler(
		ReaderServiceGetBookProcedure,
		svc.GetBook,
		connect.WithSchema(readerServiceMethods.ByName("GetBook")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.ReaderService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReaderServiceAddNoteProcedure:
			readerServiceAddNoteHandler.ServeHTTP(w, r)
		case ReaderServiceGetNotesProcedure:
			readerServiceGetNotesHandler.ServeHTTP(w, r)
		case ReaderServiceDeleteBookProcedure:
			readerServiceDeleteBookHandler.ServeHTTP(w, r)
		case ReaderServiceUploadPDFProcedure:
			readerServiceUploadPDFHandler.ServeHTTP(w, r)
		case ReaderServiceUpdateBookPageProcedure:
			readerServiceUpdateBookPageHandler.ServeHTTP(w, r)
		case ReaderServiceGetBooksProcedure:
			readerServiceGetBooksHandler.ServeHTTP(w, r)
		case ReaderServiceGetBookProcedure:
			readerServiceGetBookHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReaderServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReaderServiceHandler struct{}

func (UnimplementedReaderServiceHandler) AddNote(context.Context, *connect.Request[api.AddNoteRequest]) (*connect.Response[api.AddNoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.ReaderService.AddNote is not implemented"))
}

func (UnimplementedReaderServiceHandler) GetNotes(context.Context, *connect.Request[api.GetNotesRequest]) (*connect.Response[api.GetNotesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.ReaderService.GetNotes is not implemented"))
}

func (UnimplementedReaderServiceHandler) DeleteBook(context.Context, *connect.Request[api.DeleteBookRequest]) (*connect.Response[api.DeleteBookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.ReaderService.DeleteBook is not implemented"))
}

func (UnimplementedReaderServiceHandler) UploadPDF(context.Context, *connect.Request[api.UploadRequest]) (*connect.Response[api.UploadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.ReaderService.UploadPDF is not implemented"))
}

func (UnimplementedReaderServiceHandler) UpdateBookPage(context.Context, *connect.Request[api.UpdateBookPageRequest]) (*connect.Response[api.UpdateBookPageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.ReaderService.UpdateBookPage is not implemented"))
}

func (UnimplementedReaderServiceHandler) GetBooks(context.Context, *connect.Request[api.GetBooksRequest]) (*connect.Response[api.GetBooksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.ReaderService.GetBooks is not implemented"))
}

func (UnimplementedReaderServiceHandler) GetBook(context.Context, *connect.Request[api.GetBookRequest]) (*connect.Response[api.GetBookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.ReaderService.GetBook is not implemented"))
}
