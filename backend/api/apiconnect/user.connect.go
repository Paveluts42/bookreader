// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: api/user.proto

package apiconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	api "github.com/Paveluts42/bookreader/backend/api"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserServiceName is the fully-qualified name of the UserService service.
	UserServiceName = "api.UserService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserServiceGetUsersProcedure is the fully-qualified name of the UserService's GetUsers RPC.
	UserServiceGetUsersProcedure = "/api.UserService/GetUsers"
	// UserServiceDeleteUserProcedure is the fully-qualified name of the UserService's DeleteUser RPC.
	UserServiceDeleteUserProcedure = "/api.UserService/DeleteUser"
	// UserServiceGetUserProcedure is the fully-qualified name of the UserService's GetUser RPC.
	UserServiceGetUserProcedure = "/api.UserService/GetUser"
	// UserServiceRegisterProcedure is the fully-qualified name of the UserService's Register RPC.
	UserServiceRegisterProcedure = "/api.UserService/Register"
	// UserServiceLoginProcedure is the fully-qualified name of the UserService's Login RPC.
	UserServiceLoginProcedure = "/api.UserService/Login"
	// UserServiceRefreshTokenProcedure is the fully-qualified name of the UserService's RefreshToken
	// RPC.
	UserServiceRefreshTokenProcedure = "/api.UserService/RefreshToken"
)

// UserServiceClient is a client for the api.UserService service.
type UserServiceClient interface {
	GetUsers(context.Context, *connect.Request[api.GetUsersRequest]) (*connect.Response[api.GetUsersResponse], error)
	DeleteUser(context.Context, *connect.Request[api.DeleteUserRequest]) (*connect.Response[api.DeleteUserResponse], error)
	GetUser(context.Context, *connect.Request[api.GetUserRequest]) (*connect.Response[api.GetUserResponse], error)
	Register(context.Context, *connect.Request[api.RegisterRequest]) (*connect.Response[api.RegisterResponse], error)
	Login(context.Context, *connect.Request[api.LoginRequest]) (*connect.Response[api.LoginResponse], error)
	RefreshToken(context.Context, *connect.Request[api.RefreshRequest]) (*connect.Response[api.RefreshResponse], error)
}

// NewUserServiceClient constructs a client for the api.UserService service. By default, it uses the
// Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userServiceMethods := api.File_api_user_proto.Services().ByName("UserService").Methods()
	return &userServiceClient{
		getUsers: connect.NewClient[api.GetUsersRequest, api.GetUsersResponse](
			httpClient,
			baseURL+UserServiceGetUsersProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUsers")),
			connect.WithClientOptions(opts...),
		),
		deleteUser: connect.NewClient[api.DeleteUserRequest, api.DeleteUserResponse](
			httpClient,
			baseURL+UserServiceDeleteUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("DeleteUser")),
			connect.WithClientOptions(opts...),
		),
		getUser: connect.NewClient[api.GetUserRequest, api.GetUserResponse](
			httpClient,
			baseURL+UserServiceGetUserProcedure,
			connect.WithSchema(userServiceMethods.ByName("GetUser")),
			connect.WithClientOptions(opts...),
		),
		register: connect.NewClient[api.RegisterRequest, api.RegisterResponse](
			httpClient,
			baseURL+UserServiceRegisterProcedure,
			connect.WithSchema(userServiceMethods.ByName("Register")),
			connect.WithClientOptions(opts...),
		),
		login: connect.NewClient[api.LoginRequest, api.LoginResponse](
			httpClient,
			baseURL+UserServiceLoginProcedure,
			connect.WithSchema(userServiceMethods.ByName("Login")),
			connect.WithClientOptions(opts...),
		),
		refreshToken: connect.NewClient[api.RefreshRequest, api.RefreshResponse](
			httpClient,
			baseURL+UserServiceRefreshTokenProcedure,
			connect.WithSchema(userServiceMethods.ByName("RefreshToken")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userServiceClient implements UserServiceClient.
type userServiceClient struct {
	getUsers     *connect.Client[api.GetUsersRequest, api.GetUsersResponse]
	deleteUser   *connect.Client[api.DeleteUserRequest, api.DeleteUserResponse]
	getUser      *connect.Client[api.GetUserRequest, api.GetUserResponse]
	register     *connect.Client[api.RegisterRequest, api.RegisterResponse]
	login        *connect.Client[api.LoginRequest, api.LoginResponse]
	refreshToken *connect.Client[api.RefreshRequest, api.RefreshResponse]
}

// GetUsers calls api.UserService.GetUsers.
func (c *userServiceClient) GetUsers(ctx context.Context, req *connect.Request[api.GetUsersRequest]) (*connect.Response[api.GetUsersResponse], error) {
	return c.getUsers.CallUnary(ctx, req)
}

// DeleteUser calls api.UserService.DeleteUser.
func (c *userServiceClient) DeleteUser(ctx context.Context, req *connect.Request[api.DeleteUserRequest]) (*connect.Response[api.DeleteUserResponse], error) {
	return c.deleteUser.CallUnary(ctx, req)
}

// GetUser calls api.UserService.GetUser.
func (c *userServiceClient) GetUser(ctx context.Context, req *connect.Request[api.GetUserRequest]) (*connect.Response[api.GetUserResponse], error) {
	return c.getUser.CallUnary(ctx, req)
}

// Register calls api.UserService.Register.
func (c *userServiceClient) Register(ctx context.Context, req *connect.Request[api.RegisterRequest]) (*connect.Response[api.RegisterResponse], error) {
	return c.register.CallUnary(ctx, req)
}

// Login calls api.UserService.Login.
func (c *userServiceClient) Login(ctx context.Context, req *connect.Request[api.LoginRequest]) (*connect.Response[api.LoginResponse], error) {
	return c.login.CallUnary(ctx, req)
}

// RefreshToken calls api.UserService.RefreshToken.
func (c *userServiceClient) RefreshToken(ctx context.Context, req *connect.Request[api.RefreshRequest]) (*connect.Response[api.RefreshResponse], error) {
	return c.refreshToken.CallUnary(ctx, req)
}

// UserServiceHandler is an implementation of the api.UserService service.
type UserServiceHandler interface {
	GetUsers(context.Context, *connect.Request[api.GetUsersRequest]) (*connect.Response[api.GetUsersResponse], error)
	DeleteUser(context.Context, *connect.Request[api.DeleteUserRequest]) (*connect.Response[api.DeleteUserResponse], error)
	GetUser(context.Context, *connect.Request[api.GetUserRequest]) (*connect.Response[api.GetUserResponse], error)
	Register(context.Context, *connect.Request[api.RegisterRequest]) (*connect.Response[api.RegisterResponse], error)
	Login(context.Context, *connect.Request[api.LoginRequest]) (*connect.Response[api.LoginResponse], error)
	RefreshToken(context.Context, *connect.Request[api.RefreshRequest]) (*connect.Response[api.RefreshResponse], error)
}

// NewUserServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserServiceHandler(svc UserServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userServiceMethods := api.File_api_user_proto.Services().ByName("UserService").Methods()
	userServiceGetUsersHandler := connect.NewUnaryHandler(
		UserServiceGetUsersProcedure,
		svc.GetUsers,
		connect.WithSchema(userServiceMethods.ByName("GetUsers")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceDeleteUserHandler := connect.NewUnaryHandler(
		UserServiceDeleteUserProcedure,
		svc.DeleteUser,
		connect.WithSchema(userServiceMethods.ByName("DeleteUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceGetUserHandler := connect.NewUnaryHandler(
		UserServiceGetUserProcedure,
		svc.GetUser,
		connect.WithSchema(userServiceMethods.ByName("GetUser")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceRegisterHandler := connect.NewUnaryHandler(
		UserServiceRegisterProcedure,
		svc.Register,
		connect.WithSchema(userServiceMethods.ByName("Register")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceLoginHandler := connect.NewUnaryHandler(
		UserServiceLoginProcedure,
		svc.Login,
		connect.WithSchema(userServiceMethods.ByName("Login")),
		connect.WithHandlerOptions(opts...),
	)
	userServiceRefreshTokenHandler := connect.NewUnaryHandler(
		UserServiceRefreshTokenProcedure,
		svc.RefreshToken,
		connect.WithSchema(userServiceMethods.ByName("RefreshToken")),
		connect.WithHandlerOptions(opts...),
	)
	return "/api.UserService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserServiceGetUsersProcedure:
			userServiceGetUsersHandler.ServeHTTP(w, r)
		case UserServiceDeleteUserProcedure:
			userServiceDeleteUserHandler.ServeHTTP(w, r)
		case UserServiceGetUserProcedure:
			userServiceGetUserHandler.ServeHTTP(w, r)
		case UserServiceRegisterProcedure:
			userServiceRegisterHandler.ServeHTTP(w, r)
		case UserServiceLoginProcedure:
			userServiceLoginHandler.ServeHTTP(w, r)
		case UserServiceRefreshTokenProcedure:
			userServiceRefreshTokenHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserServiceHandler struct{}

func (UnimplementedUserServiceHandler) GetUsers(context.Context, *connect.Request[api.GetUsersRequest]) (*connect.Response[api.GetUsersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.UserService.GetUsers is not implemented"))
}

func (UnimplementedUserServiceHandler) DeleteUser(context.Context, *connect.Request[api.DeleteUserRequest]) (*connect.Response[api.DeleteUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.UserService.DeleteUser is not implemented"))
}

func (UnimplementedUserServiceHandler) GetUser(context.Context, *connect.Request[api.GetUserRequest]) (*connect.Response[api.GetUserResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.UserService.GetUser is not implemented"))
}

func (UnimplementedUserServiceHandler) Register(context.Context, *connect.Request[api.RegisterRequest]) (*connect.Response[api.RegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.UserService.Register is not implemented"))
}

func (UnimplementedUserServiceHandler) Login(context.Context, *connect.Request[api.LoginRequest]) (*connect.Response[api.LoginResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.UserService.Login is not implemented"))
}

func (UnimplementedUserServiceHandler) RefreshToken(context.Context, *connect.Request[api.RefreshRequest]) (*connect.Response[api.RefreshResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("api.UserService.RefreshToken is not implemented"))
}
