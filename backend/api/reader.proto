syntax = "proto3";
package api;
option go_package = "github.com/Paveluts42/bookreader/backend/api";

message UploadRequest {
  string book_id = 1;
  bytes chunk = 2;
  string title = 3;
  string author = 4;
}


message Book {
  string id = 1;
  string title = 2;
  string author = 3;
  string file_path = 4;
  string cover_url = 5;
  int32 page = 6;
  int32 pageAll = 7;
  repeated Note notes = 8; // List of notes associated with the book
}
message GetBooksRequest {}

message GetBooksResponse {
  repeated Book books = 1;
}
message UploadResponse {
  string book_id = 1;
  bool ok = 2;
}
message DeleteBookRequest {
  string book_id = 1;
}
message DeleteBookResponse {
  bool ok = 1;
}

message GetBookRequest {
  string book_id = 1;
}
message GetBookResponse {
  Book book = 1;
  string error = 2; // Error message if book not found
}

message UpdateBookPageRequest {
  string book_id = 1;
  int32 page = 2;
}
message UpdateBookPageResponse {
  bool ok = 1;
}
message Note { string id =1; string book_id=2; int32 page=3; string text=4; }
message NoteResponse { bool ok =1; string note_id=2; }
message ListNotesRequest { string book_id =1; }

message ReadingPosition { string book_id =1; int32 current_page=2; }
message PositionResponse { bool ok =1; }
message GetNotesRequest { string book_id = 1; } 
message GetNotesResponse {
  repeated Note notes = 1;
}
message addNoteRequest {
  string book_id = 1;
  int32 page = 2;
  string text = 3;
}
message addNoteResponse {
  bool ok = 1;
  string note_id = 2; // ID of the newly created note
}
service ReaderService {
  rpc AddNote(addNoteRequest) returns (addNoteResponse);
  rpc GetNotes(GetNotesRequest) returns (GetNotesResponse);
  rpc DeleteBook(DeleteBookRequest) returns (DeleteBookResponse);
  rpc UploadPDF( UploadRequest) returns (UploadResponse);
  rpc UpdateBookPage(UpdateBookPageRequest) returns (UpdateBookPageResponse);
  rpc GetBooks(GetBooksRequest) returns (GetBooksResponse);
  rpc GetBook(GetBookRequest) returns (GetBookResponse);
}