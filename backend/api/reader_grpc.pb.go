// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/reader.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReaderService_UploadPDF_FullMethodName    = "/reader.ReaderService/UploadPDF"
	ReaderService_GetPDF_FullMethodName       = "/reader.ReaderService/GetPDF"
	ReaderService_SaveNote_FullMethodName     = "/reader.ReaderService/SaveNote"
	ReaderService_ListNotes_FullMethodName    = "/reader.ReaderService/ListNotes"
	ReaderService_SavePosition_FullMethodName = "/reader.ReaderService/SavePosition"
	ReaderService_GetPosition_FullMethodName  = "/reader.ReaderService/GetPosition"
)

// ReaderServiceClient is the client API for ReaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReaderServiceClient interface {
	UploadPDF(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadRequest, UploadResponse], error)
	GetPDF(ctx context.Context, in *GetPDFRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetPDFChunk], error)
	SaveNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*NoteResponse, error)
	ListNotes(ctx context.Context, in *ListNotesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Note], error)
	SavePosition(ctx context.Context, in *ReadingPosition, opts ...grpc.CallOption) (*PositionResponse, error)
	GetPosition(ctx context.Context, in *GetPDFRequest, opts ...grpc.CallOption) (*ReadingPosition, error)
}

type readerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReaderServiceClient(cc grpc.ClientConnInterface) ReaderServiceClient {
	return &readerServiceClient{cc}
}

func (c *readerServiceClient) UploadPDF(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadRequest, UploadResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ReaderService_ServiceDesc.Streams[0], ReaderService_UploadPDF_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadRequest, UploadResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReaderService_UploadPDFClient = grpc.ClientStreamingClient[UploadRequest, UploadResponse]

func (c *readerServiceClient) GetPDF(ctx context.Context, in *GetPDFRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GetPDFChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ReaderService_ServiceDesc.Streams[1], ReaderService_GetPDF_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetPDFRequest, GetPDFChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReaderService_GetPDFClient = grpc.ServerStreamingClient[GetPDFChunk]

func (c *readerServiceClient) SaveNote(ctx context.Context, in *Note, opts ...grpc.CallOption) (*NoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NoteResponse)
	err := c.cc.Invoke(ctx, ReaderService_SaveNote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerServiceClient) ListNotes(ctx context.Context, in *ListNotesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Note], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ReaderService_ServiceDesc.Streams[2], ReaderService_ListNotes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ListNotesRequest, Note]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReaderService_ListNotesClient = grpc.ServerStreamingClient[Note]

func (c *readerServiceClient) SavePosition(ctx context.Context, in *ReadingPosition, opts ...grpc.CallOption) (*PositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PositionResponse)
	err := c.cc.Invoke(ctx, ReaderService_SavePosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *readerServiceClient) GetPosition(ctx context.Context, in *GetPDFRequest, opts ...grpc.CallOption) (*ReadingPosition, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReadingPosition)
	err := c.cc.Invoke(ctx, ReaderService_GetPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReaderServiceServer is the server API for ReaderService service.
// All implementations must embed UnimplementedReaderServiceServer
// for forward compatibility.
type ReaderServiceServer interface {
	UploadPDF(grpc.ClientStreamingServer[UploadRequest, UploadResponse]) error
	GetPDF(*GetPDFRequest, grpc.ServerStreamingServer[GetPDFChunk]) error
	SaveNote(context.Context, *Note) (*NoteResponse, error)
	ListNotes(*ListNotesRequest, grpc.ServerStreamingServer[Note]) error
	SavePosition(context.Context, *ReadingPosition) (*PositionResponse, error)
	GetPosition(context.Context, *GetPDFRequest) (*ReadingPosition, error)
	mustEmbedUnimplementedReaderServiceServer()
}

// UnimplementedReaderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReaderServiceServer struct{}

func (UnimplementedReaderServiceServer) UploadPDF(grpc.ClientStreamingServer[UploadRequest, UploadResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadPDF not implemented")
}
func (UnimplementedReaderServiceServer) GetPDF(*GetPDFRequest, grpc.ServerStreamingServer[GetPDFChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetPDF not implemented")
}
func (UnimplementedReaderServiceServer) SaveNote(context.Context, *Note) (*NoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveNote not implemented")
}
func (UnimplementedReaderServiceServer) ListNotes(*ListNotesRequest, grpc.ServerStreamingServer[Note]) error {
	return status.Errorf(codes.Unimplemented, "method ListNotes not implemented")
}
func (UnimplementedReaderServiceServer) SavePosition(context.Context, *ReadingPosition) (*PositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavePosition not implemented")
}
func (UnimplementedReaderServiceServer) GetPosition(context.Context, *GetPDFRequest) (*ReadingPosition, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosition not implemented")
}
func (UnimplementedReaderServiceServer) mustEmbedUnimplementedReaderServiceServer() {}
func (UnimplementedReaderServiceServer) testEmbeddedByValue()                       {}

// UnsafeReaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReaderServiceServer will
// result in compilation errors.
type UnsafeReaderServiceServer interface {
	mustEmbedUnimplementedReaderServiceServer()
}

func RegisterReaderServiceServer(s grpc.ServiceRegistrar, srv ReaderServiceServer) {
	// If the following call pancis, it indicates UnimplementedReaderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReaderService_ServiceDesc, srv)
}

func _ReaderService_UploadPDF_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReaderServiceServer).UploadPDF(&grpc.GenericServerStream[UploadRequest, UploadResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReaderService_UploadPDFServer = grpc.ClientStreamingServer[UploadRequest, UploadResponse]

func _ReaderService_GetPDF_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPDFRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReaderServiceServer).GetPDF(m, &grpc.GenericServerStream[GetPDFRequest, GetPDFChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReaderService_GetPDFServer = grpc.ServerStreamingServer[GetPDFChunk]

func _ReaderService_SaveNote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Note)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderServiceServer).SaveNote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReaderService_SaveNote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderServiceServer).SaveNote(ctx, req.(*Note))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderService_ListNotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListNotesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ReaderServiceServer).ListNotes(m, &grpc.GenericServerStream[ListNotesRequest, Note]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ReaderService_ListNotesServer = grpc.ServerStreamingServer[Note]

func _ReaderService_SavePosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadingPosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderServiceServer).SavePosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReaderService_SavePosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderServiceServer).SavePosition(ctx, req.(*ReadingPosition))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReaderService_GetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPDFRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReaderServiceServer).GetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReaderService_GetPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReaderServiceServer).GetPosition(ctx, req.(*GetPDFRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReaderService_ServiceDesc is the grpc.ServiceDesc for ReaderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReaderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "reader.ReaderService",
	HandlerType: (*ReaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveNote",
			Handler:    _ReaderService_SaveNote_Handler,
		},
		{
			MethodName: "SavePosition",
			Handler:    _ReaderService_SavePosition_Handler,
		},
		{
			MethodName: "GetPosition",
			Handler:    _ReaderService_GetPosition_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadPDF",
			Handler:       _ReaderService_UploadPDF_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetPDF",
			Handler:       _ReaderService_GetPDF_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListNotes",
			Handler:       _ReaderService_ListNotes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/reader.proto",
}
